---
import "@css/fonts.css";
import "@css/app.css";
import Header from "@components/layout/Header.astro";
import Footer from "@components/layout/Footer.astro";
import Cta from "@components/blocks/Cta.astro";
import NavMobile from "@components/nav/NavMobile.astro";
import { SEO } from "astro-seo";
import type { SeoContent } from "@custom-types/index";

export interface Props {
  title: string;
  cta?: {
    title: string;
    text: string;
    uri: string;
    linkLabel: string;
    noMT: boolean;
  };
  seoContent: SeoContent;
}

const { title, cta, seoContent } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="nl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      titleTemplate={"%s â€” Angelo Keirsebilck"}
      title={seoContent?.title ?? title}
      openGraph={{
        basic: {
          title: seoContent.og.title,
          image: seoContent.og.image,
          type: "website",
        },
        image: {
          alt: `Screenshot van ${title} page`,
          height: 600,
          width: 1200,
        },
      }}
      description={seoContent?.description}
      noindex={import.meta.env.LIVE == 0}
      nofollow={import.meta.env.LIVE == 0}
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body
    class="font-poppins text-base flex flex-col min-h-screen text-black-default"
  >
    <!-- <NavMobile navList={sortedPages} locale={locale} client:load /> -->
    <NavMobile />
    <Header />

    <slot />
    {
      cta && (
        <Cta
          link={{
            style: {
              intent: "green",
              size: "medium",
            },
            uri: cta.uri,
            label: cta.linkLabel,
          }}
          title={cta.title}
          text={cta.text}
          noMT={cta.noMT}
        />
      )
    }

    <Footer ctaActive={cta !== undefined} />
    <script>
      import { useStaggerAnimationFromTo } from "@utils/useStaggerAnimationFromTo";
      const staggetFromToParents = document.querySelectorAll(
        ".js-staggerFromTo"
      ) as NodeList;
      staggetFromToParents.forEach((parent) => {
        useStaggerAnimationFromTo(parent as HTMLElement);
      });
      import {
        installTwicPics,
        TwicImg,
        TwicVideo,
      } from "@twicpics/components/webcomponents";
      import "@twicpics/components/style.css";

      installTwicPics({
        domain: `https://angelokeirsebilck.twic.pics`,
        env: import.meta.env.PUBLIC_TWIC_PIC_ENV,
      });
      customElements.define(`twic-video`, TwicVideo);
      // customElements.define(`twic-img`, TwicImg);
    </script>
  </body>
</html>
