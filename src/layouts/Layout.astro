---
import "@css/fonts.css";
import "@css/app.css";
import Header from "@components/layout/Header.astro";
import Footer from "@components/layout/Footer.astro";
import Cta from "@components/blocks/Cta.astro";
import NavMobile from "@components/nav/NavMobile.svelte";
import { getCollection } from "astro:content";

export interface Props {
  title: string;
  cta?: {
    title: string;
    text: string;
    uri: string;
    linkLabel: string;
    noMT: boolean;
  };
}
const url = Astro.url;
const [, locale] = url.pathname.split("/");

const { title, cta } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const allPages = await getCollection("pages", (page) => {
  const [pageLocale] = page.id.split("/");
  if (pageLocale == locale && page.data.sitemap) {
    return page;
  }
});

const sortedPages = allPages.sort(
  (a, b) => a.data.menuOrder - b.data.menuOrder
);
---

<!DOCTYPE html>
<html lang="nl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="robots" content="noindex, nofollow" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    <title>{title}</title>
  </head>
  <body
    class="font-poppins text-base flex flex-col min-h-screen text-black-default"
  >
    <NavMobile navList={sortedPages} locale={locale} client:load />
    <Header />

    <slot />
    {
      cta && (
        <Cta
          link={{
            style: {
              intent: "green",
              size: "medium",
            },
            uri: cta.uri,
            label: cta.linkLabel,
          }}
          title={cta.title}
          text={cta.text}
          noMT={cta.noMT}
        />
      )
    }

    <Footer ctaActive={cta !== undefined} />
  </body>
</html>

<script>
  import { useStaggerAnimationFromTo } from "@utils/useStaggerAnimationFromTo";
  const staggetFromToParents = document.querySelectorAll(
    ".js-staggerFromTo"
  ) as NodeList;
  staggetFromToParents.forEach((parent) => {
    useStaggerAnimationFromTo(parent as HTMLElement);
  });
  import {
    installTwicPics,
    TwicImg,
    TwicVideo,
  } from "@twicpics/components/webcomponents";
  import "@twicpics/components/style.css";

  installTwicPics({
    domain: `https://angelokeirsebilck.twic.pics`,
    env: import.meta.env.PUBLIC_TWIC_PIC_ENV,
  });
  customElements.define(`twic-video`, TwicVideo);
  // customElements.define(`twic-img`, TwicImg);
</script>
